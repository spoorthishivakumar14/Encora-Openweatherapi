var numOfCalls =0;
var compare = function (input,output) {
 var failureWatcher = false;
 var maxCallsPermitted = Object.keys(input).length;
    for (var key in input) {
       switch (typeof(input[key])) {

          case "object": if (!(output.hasOwnProperty(key)) || !(compare(input[key],output[key]))) {
                            failureWatcher = true;
                            return false;
                         }
                         break;
          case "function":
                        if (typeof (output[key]) == 'undefined' || (key != 'compare' && input[key].toString() != output[key].toString())) return false;
                        break;
          case "number" :
          case "boolean" :
          case "string" :
          default: if (input[key] != output[key]) {
                       failureWatcher = true;
                       return false;
                    } else {
                      try {
                            JSON.stringify(input);
                      } catch(e) {
                            var errorMsg = e.toString();
                         if (errorMsg.indexOf("Converting circular structure to JSON")); {
                             numOfCalls = numOfCalls +1;
                             if(numOfCalls > maxCallsPermitted){
                                return true;
                             }
                         }
                      } 
                  }

       }
    }
    if (failureWatcher) {
        return false
    } else {
        return true;
    }
}
var deepCompare = function (input,output) {
  if(compare(input,output) && compare(output,input)){
      return true;
  } else {
    return false;
  }
}
exports.compare = compare;
exports.deepStrictCompare = deepCompare;
